name: Build and Package the Game for different platforms

on:
  push:
    tags:
      - '*'

jobs:
  create-release:
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:

      - name: Set variables
        id: vars
        run: |
          echo "REF_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.REF_NAME }}
          release_name: Release ${{ env.REF_NAME }}
          draft: false
          prerelease: false

  build-macos:
    runs-on: macos-13
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew update
          brew install sdl2

      - name: Build SDL2_image to avoid a lot of dylibs
        run: |
          git clone https://github.com/libsdl-org/SDL_image.git
          cd SDL_image
          git checkout release-2.8.2
          mkdir build
          cd build
          mkdir -p ../../local
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=../../local \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=13 \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DSDL2IMAGE_AVIF=OFF \
            -DSDL2IMAGE_BMP=OFF \
            -DSDL2IMAGE_GIF=OFF \
            -DSDL2IMAGE_JPG=OFF \
            -DSDL2IMAGE_JXL=OFF \
            -DSDL2IMAGE_LBM=OFF \
            -DSDL2IMAGE_PCX=OFF \
            -DSDL2IMAGE_PNG=ON \
            -DSDL2IMAGE_PNM=OFF \
            -DSDL2IMAGE_QOI=OFF \
            -DSDL2IMAGE_SVG=OFF \
            -DSDL2IMAGE_TGA=OFF \
            -DSDL2IMAGE_TIF=OFF \
            -DSDL2IMAGE_WEBP=OFF \
            -DSDL2IMAGE_XCF=OFF \
            -DSDL2IMAGE_XPM=OFF \
            -DSDL2IMAGE_XV=OFF
          make
          make install

      - name: Build SDL2_mixer to avoid a lot of dylibs
        run: |
          git clone https://github.com/libsdl-org/SDL_mixer.git
          cd SDL_mixer
          git checkout release-2.8.0
          mkdir build
          cd build
          mkdir -p ../../local
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=../../local \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=13 \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DSDL2MIXER_CMD=OFF \
            -DSDL2MIXER_FLAC=OFF \
            -DSDL2MIXER_GME=OFF \
            -DSDL2MIXER_MOD=OFF \
            -DSDL2MIXER_MIDI=OFF \
            -DSDL2MIXER_OPUS=OFF \
            -DSDL2MIXER_VORBIS=OFF \
            -DSDL2MIXER_WAVE=OFF \
            -DSDL2MIXER_WAVPACK=OFF \
            -DSDL2MIXER_MP3=ON
          make
          make install

      - name: Build SDL2_ttf to avoid a lot of dylibs
        run: |
          git clone https://github.com/libsdl-org/SDL_ttf.git
          cd SDL_ttf
          git checkout release-2.22.0
          mkdir build
          cd build
          mkdir -p ../../local
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=../../local \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=13 \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DSDL2TTF_HARFBUZZ=OFF \
            -DSDL2TTF_SAMPLES=OFF
          make
          make install

      - name: Build project
        run: |
          export SDL2_INCLUDE_DIR="/usr/local/include/SDL2"
          export SDL2_LIB_DIR="/usr/local/lib"
          export SDL2_LOCAL_INCLUDE_DIR="./local/include/SDL2"
          export SDL2_LOCAL_LIB_DIR="./local/lib"
          make -f Makefile.release.macos

      - name: Inspect dependencies
        run: |
          echo "Sartre:"
          otool -L Sartre
          echo "Image:"
          otool -L ./local/lib/libSDL2_image-2.0.801.0.0.dylib
          echo "TTF:"
          otool -L ./local/lib/libSDL2_ttf-2.0.2201.0.0.dylib
          echo "Mixer:"
          otool -L ./local/lib/libSDL2_mixer-2.0.801.0.0.dylib

      - name: Create app bundle
        run: |
          mkdir -p Sartre.app/Contents/MacOS
          cp Sartre Sartre.app/Contents/MacOS/

          mkdir -p Sartre.app/Contents/Resources
          cp -r data Sartre.app/Contents/Resources/

          mkdir -p Sartre.app/Contents/Frameworks

          # Add rpath to the executable
          install_name_tool -add_rpath @executable_path/../Frameworks Sartre

          # Copy SDL2 library to the app bundle
          cp /usr/local/opt/sdl2/lib/libSDL2-2.0.0.dylib Sartre.app/Contents/Frameworks/
          install_name_tool -change /usr/local/opt/sdl2/lib/libSDL2-2.0.0.dylib @executable_path/../Frameworks/libSDL2-2.0.0.dylib Sartre.app/Contents/MacOS/Sartre

          # Copy SDL2_image library to the app bundle
          cp ./local/lib/libSDL2_image-2.0.801.0.0.dylib Sartre.app/Contents/Frameworks/
          install_name_tool -id @executable_path/../Frameworks/libSDL2_image-2.0.801.0.0.dylib Sartre.app/Contents/Frameworks/libSDL2_image-2.0.801.0.0.dylib
          install_name_tool -change @rpath/libSDL2_image-2.0.801.0.0.dylib @executable_path/../Frameworks/libSDL2_image-2.0.801.0.0.dylib Sartre.app/Contents/MacOS/Sartre

          # Copy SDL2_ttf library to the app bundle
          cp ./local/lib/libSDL2_ttf-2.0.2201.0.0.dylib Sartre.app/Contents/Frameworks/
          install_name_tool -id @executable_path/../Frameworks/libSDL2_ttf-2.0.2201.0.0.dylib Sartre.app/Contents/Frameworks/libSDL2_ttf-2.0.2201.0.0.dylib
          install_name_tool -change @rpath/libSDL2_ttf-2.0.2201.0.0.dylib @executable_path/../Frameworks/libSDL2_ttf-2.0.2201.0.0.dylib Sartre.app/Contents/MacOS/Sartre

          # Copy SDL2_mixer library to the app bundle
          cp ./local/lib/libSDL2_mixer-2.0.801.0.0.dylib Sartre.app/Contents/Frameworks/
          install_name_tool -id @executable_path/../Frameworks/libSDL2_mixer-2.0.801.0.0.dylib Sartre.app/Contents/Frameworks/libSDL2_mixer-2.0.801.0.0.dylib
          install_name_tool -change @rpath/libSDL2_mixer-2.0.801.0.0.dylib @executable_path/../Frameworks/libSDL2_mixer-2.0.801.0.0.dylib Sartre.app/Contents/MacOS/Sartre

          echo '<?xml version="1.0" encoding="UTF-8"?>' > Sartre.app/Contents/Info.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> Sartre.app/Contents/Info.plist
          echo '<plist version="1.0">' >> Sartre.app/Contents/Info.plist
          echo '<dict>' >> Sartre.app/Contents/Info.plist
          echo '  <key>CFBundleExecutable</key>' >> Sartre.app/Contents/Info.plist
          echo '  <string>Sartre</string>' >> Sartre.app/Contents/Info.plist
          echo '  <key>CFBundleIdentifier</key>' >> Sartre.app/Contents/Info.plist
          echo '  <string>com.example.Sartre</string>' >> Sartre.app/Contents/Info.plist
          echo '  <key>CFBundleName</key>' >> Sartre.app/Contents/Info.plist
          echo '  <string>Sartre</string>' >> Sartre.app/Contents/Info.plist
          echo '  <key>CFBundleVersion</key>' >> Sartre.app/Contents/Info.plist
          echo '  <string>1.0</string>' >> Sartre.app/Contents/Info.plist
          echo '</dict>' >> Sartre.app/Contents/Info.plist
          echo '</plist>' >> Sartre.app/Contents/Info.plist

      - name: Run smoke test from app bundle
        run: Sartre.app/Contents/MacOS/Sartre --smoke

      - name: Zip the bundle
        run: zip -r Sartre-macos-${GITHUB_REF##*/}.zip Sartre.app

      - name: Set variables
        id: vars
        run: |
          echo "REF_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Sartre-macos-${{ env.REF_NAME }}.zip
          asset_name: Sartre-macos-${{ env.REF_NAME }}.zip
          asset_content_type: application/zip

  test-macos:
    runs-on: macos-13
    needs: build-macos

    steps:

      - name: Set variables
        id: vars
        run: |
          echo "REF_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Download release
        run: |
          curl -L -o Sartre-macos.zip https://github.com/${{ github.repository }}/releases/download/${{ env.REF_NAME }}/Sartre-macos-${{ env.REF_NAME }}.zip

      - name: Unzip the bundle
        run: unzip Sartre-macos.zip

      - name: Run smoke test from app bundle
        run: Sartre.app/Contents/MacOS/Sartre --smoke

  build-windows:
    runs-on: windows-latest
    needs: create-release
    defaults:
      run:
        shell: msys2 {0}
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-cmake mingw-w64-x86_64-SDL2 mingw-w64-x86_64-libpng mingw-w64-x86_64-zlib mingw-w64-x86_64-freetype

      - name: Install general deps
        run: |
          pacman -Sy --noconfirm git

      - name: Build SDL2_image to avoid a lot of dlls
        run: |
          git clone https://github.com/libsdl-org/SDL_image.git
          cd SDL_image
          git checkout release-2.8.2
          cd ..
          mkdir SDL_image_build
          cd SDL_image_build
          cmake -G "Unix Makefiles" \
            -DCMAKE_MAKE_PROGRAM=${MINGW_PREFIX}/bin/mingw32-make.exe \
            -DCMAKE_C_COMPILER=${MINGW_PREFIX}/bin/gcc.exe \
            -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
            -DSDL2IMAGE_AVIF=OFF \
            -DSDL2IMAGE_BMP=OFF \
            -DSDL2IMAGE_GIF=OFF \
            -DSDL2IMAGE_JPG=OFF \
            -DSDL2IMAGE_JXL=OFF \
            -DSDL2IMAGE_LBM=OFF \
            -DSDL2IMAGE_PCX=OFF \
            -DSDL2IMAGE_PNG=ON \
            -DSDL2IMAGE_PNM=OFF \
            -DSDL2IMAGE_QOI=OFF \
            -DSDL2IMAGE_SVG=OFF \
            -DSDL2IMAGE_TGA=OFF \
            -DSDL2IMAGE_TIF=OFF \
            -DSDL2IMAGE_WEBP=OFF \
            -DSDL2IMAGE_XCF=OFF \
            -DSDL2IMAGE_XPM=OFF \
            -DSDL2IMAGE_XV=OFF ../SDL_image
          mingw32-make
          mingw32-make install

      - name: Build SDL2_mixer to avoid a lot of dlls
        run: |
          git clone https://github.com/libsdl-org/SDL_mixer.git
          cd SDL_mixer
          git checkout release-2.8.0
          cd ..
          mkdir SDL_mixer_build
          cd SDL_mixer_build
          cmake -G "Unix Makefiles" \
            -DCMAKE_MAKE_PROGRAM=${MINGW_PREFIX}/bin/mingw32-make.exe \
            -DCMAKE_C_COMPILER=${MINGW_PREFIX}/bin/gcc.exe \
            -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
            -DSDL2MIXER_CMD=OFF \
            -DSDL2MIXER_FLAC=OFF \
            -DSDL2MIXER_GME=OFF \
            -DSDL2MIXER_MOD=OFF \
            -DSDL2MIXER_MIDI=OFF \
            -DSDL2MIXER_OPUS=OFF \
            -DSDL2MIXER_VORBIS=OFF \
            -DSDL2MIXER_WAVE=OFF \
            -DSDL2MIXER_WAVPACK=OFF \
            -DSDL2MIXER_MP3=ON \
            ../SDL_mixer
          mingw32-make
          mingw32-make install

      - name: Build SDL2_ttf to avoid a lot of dlls
        run: |
          git clone https://github.com/libsdl-org/SDL_ttf.git
          cd SDL_ttf
          git checkout release-2.22.0
          cd ..
          mkdir SDL_ttf_build
          cd SDL_ttf_build
          cmake -G "Unix Makefiles" \
            -DCMAKE_MAKE_PROGRAM=${MINGW_PREFIX}/bin/mingw32-make.exe \
            -DCMAKE_C_COMPILER=${MINGW_PREFIX}/bin/gcc.exe \
            -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
            -DSDL2TTF_HARFBUZZ=OFF \
            -DSDL2TTF_SAMPLES=OFF \
            ../SDL_ttf
          mingw32-make
          mingw32-make install

      - name: Build project
        run: |
          mingw32-make -f Makefile.release.win

      - name: Install zip
        run: |
          pacman -Sy --noconfirm zip

      - name: Package all necessary files
        run: |
          mkdir Sartre
          cp ./Sartre.exe Sartre/
          cp -r ./data Sartre/
          cp /mingw64/bin/SDL2.dll Sartre/
          cp /mingw64/bin/SDL2_mixer.dll Sartre/
          cp /mingw64/bin/SDL2_image.dll Sartre/
          # ttf deps
          cp /mingw64/bin/SDL2_ttf.dll Sartre/
          cp /mingw64/bin/libfreetype-6.dll Sartre/
          cp /mingw64/bin/libbrotlidec.dll Sartre/
          cp /mingw64/bin/libbrotlicommon.dll Sartre/
          cp /mingw64/bin/libbz2-1.dll Sartre/
          cp /mingw64/bin/libpng16-16.dll Sartre/
          cp /mingw64/bin/libharfbuzz-0.dll Sartre/
          cp /mingw64/bin/zlib1.dll Sartre/
          cp /mingw64/bin/libglib-2.0-0.dll Sartre/
          cp /mingw64/bin/libgraphite2.dll Sartre/
          cp /mingw64/bin/libpcre2-8-0.dll Sartre/
          # other deps
          cp /mingw64/bin/libstdc++-6.dll Sartre/
          cp /mingw64/bin/libgcc_s_seh-1.dll Sartre/
          cp /mingw64/bin/libwinpthread-1.dll Sartre/
          zip -r Sartre-win64-${GITHUB_REF##*/}.zip Sartre

      - name: Set variables
        id: vars
        run: |
          echo "REF_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Sartre-win64-${{ env.REF_NAME }}.zip
          asset_name: Sartre-win64-${{ env.REF_NAME }}.zip
          asset_content_type: application/zip

